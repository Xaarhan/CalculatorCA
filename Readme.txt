
В условии задачи нет деления слоя domain на domain и Iteractors/UseCases, но здесь я укажу разделение
Все три  слоя сделаны в отдельных assembly. Assembly Data и Presentation знают про Assembly Domain, который ничег не знает про другие assembly. 


Слой Domain
  В базовом domain положил функцию сложения двух чисел с интерфейсом (int, int) : int
В Iteractors выделил: загрузку из лога, сохранение, и вычисление результата
Кроме того там же лежит интерфейс для gateway к репозитории, я не уверен что так правильно,
но если он будет в Assembly Data то Assembly Domain придется знать про Data.

Слой Data
  Тут только DataRepository и FileRepository. FileRepository умеет читать и писать txt файл на диск, а DataReposity 
это прослойка с простым интерфейсом, чтобы удобнее было потом подменять хранилища данных, например база данных вместо
файла на диске.

Слой Presentation который через MVP
  View здесь это MonoBehavior на интерфейсе
  Presenter подписывается на 2 события из View: нажатие на кнопку рассчета и закрытие приложения,
передает данные от View к Model и обратно;
  Model содержит в себе Итеракторы из Domain и вызывает их по запросу от Presenter




Я не делал Mapping данных при переходе между слоями, 
хотя он может быть полезен если в калькуляторе будет много действий, и чтобы удобнее отдавать ошибку вычислений. 
Много где надо удалить лишние using.
Нет проверки особого случая когда поле ввода пустое, и знаки пробела внутри выражения тоже засчитает за ошибку.

По времени заняло около одного дня, не считая спорадических размышлений в свободное время в течении недели.
Написание кода с учетом первого, неудавшегося варианта около 3х часов.



Тут еще некоторые мои размышления
  Я не везде хорошо поименовал папки в проекте, и допустил еще некоторые недочеты 
  например в одном слое интерфейсы в отдельной папке, а в другом нет.
  
  В Presenter я делаю парсинг загруженного лога, чтобы передать 1 строку в InputField, а остальное в текстовое поле лога
  еще я зачем то в файле лога сделал делитель строк ';' вместо \n\r
  
  Вообще когда я читал про CleanArchitecture то охреневал насколько разное про нее пишут
  В одних статьях в domain выделяют только структуры данных, в других и самую базовую логику тоже.
  Слои в разных статьях называются по разному, а некоторые примеры вообще, по-моему, с ошибками.
  
  Раньше я не работал с CleanArchitecture, написал архитектуру насколько понял ее принципы. 
  Информацию про нее читал/искал где то рабочий день
  
  
  



